import { useState } from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { Card, CardContent } from '@/components/ui/card';
import { Separator } from '@/components/ui/separator';
import { Plus, Trash2, Loader2 } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import { supabase } from '@/integrations/supabase/client';

interface LineItem {
  id: string;
  description: string;
  cost: number;
}

interface CreateInvoiceModalProps {
  isOpen: boolean;
  onClose: () => void;
  jobId: string;
  jobDescription: string;
  customerName: string;
  vehicleInfo: string;
  onInvoiceCreated: () => void;
}

export function CreateInvoiceModal({ 
  isOpen, 
  onClose, 
  jobId, 
  jobDescription, 
  customerName, 
  vehicleInfo,
  onInvoiceCreated 
}: CreateInvoiceModalProps) {
  const { toast } = useToast();
  const [lineItems, setLineItems] = useState<LineItem[]>([
    { id: '1', description: jobDescription, cost: 0 }
  ]);
  const [isSubmitting, setIsSubmitting] = useState(false);

  const addLineItem = () => {
    const newItem: LineItem = {
      id: Date.now().toString(),
      description: '',
      cost: 0
    };
    setLineItems([...lineItems, newItem]);
  };

  const updateLineItem = (id: string, field: 'description' | 'cost', value: string | number) => {
    setLineItems(lineItems.map(item => 
      item.id === id 
        ? { ...item, [field]: field === 'cost' ? Number(value) : value }
        : item
    ));
  };

  const removeLineItem = (id: string) => {
    if (lineItems.length > 1) {
      setLineItems(lineItems.filter(item => item.id !== id));
    }
  };

  const calculateTotal = () => {
    return lineItems.reduce((total, item) => total + (item.cost || 0), 0);
  };

  const handleSaveInvoice = async () => {
    // Validate line items
    const validItems = lineItems.filter(item => item.description.trim() && item.cost > 0);
    
    if (validItems.length === 0) {
      toast({
        title: "Error",
        description: "Please add at least one valid line item with description and cost",
        variant: "destructive",
      });
      return;
    }

    setIsSubmitting(true);

    try {
      // Update job with total cost and mark as completed
      const totalCost = calculateTotal();
      const { error: jobError } = await supabase
        .from('jobs')
        .update({ 
          cost: totalCost,
          status: 'completed'
        })
        .eq('id', jobId);

      if (jobError) throw jobError;

      // Create invoice
      const { error: invoiceError } = await supabase
        .from('invoices')
        .insert({
          job_id: jobId,
          invoice_number: null, // Will be auto-generated by trigger
        });

      if (invoiceError) throw invoiceError;

      toast({
        title: "Success",
        description: "Invoice created successfully and job marked as completed",
      });

      onInvoiceCreated();
      onClose();
    } catch (error) {
      console.error('Error creating invoice:', error);
      toast({
        title: "Error",
        description: "Failed to create invoice",
        variant: "destructive",
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleCancel = () => {
    setLineItems([{ id: '1', description: jobDescription, cost: 0 }]);
    onClose();
  };

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle>Create Invoice</DialogTitle>
        </DialogHeader>

        <div className="space-y-4">
          {/* Job Summary */}
          <Card>
            <CardContent className="p-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
                <div>
                  <Label className="text-muted-foreground">Customer</Label>
                  <p className="font-medium">{customerName}</p>
                </div>
                <div>
                  <Label className="text-muted-foreground">Vehicle</Label>
                  <p className="font-medium">{vehicleInfo}</p>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Line Items */}
          <div className="space-y-4">
            <div className="flex items-center justify-between">
              <Label className="text-lg font-semibold">Invoice Items</Label>
              <Button
                type="button"
                variant="outline"
                size="sm"
                onClick={addLineItem}
              >
                <Plus className="h-4 w-4 mr-2" />
                Add Item
              </Button>
            </div>

            <div className="space-y-3">
              {lineItems.map((item) => (
                <Card key={item.id}>
                  <CardContent className="p-4">
                    <div className="flex gap-4 items-start">
                      <div className="flex-1">
                        <Label htmlFor={`description-${item.id}`}>Description</Label>
                        <Textarea
                          id={`description-${item.id}`}
                          value={item.description}
                          onChange={(e) => updateLineItem(item.id, 'description', e.target.value)}
                          placeholder="Service description"
                          rows={2}
                          className="mt-1"
                        />
                      </div>
                      <div className="w-32">
                        <Label htmlFor={`cost-${item.id}`}>Cost (Ksh)</Label>
                        <Input
                          id={`cost-${item.id}`}
                          type="number"
                          min="0"
                          step="0.01"
                          value={item.cost || ''}
                          onChange={(e) => updateLineItem(item.id, 'cost', e.target.value)}
                          placeholder="0.00"
                          className="mt-1"
                        />
                      </div>
                      <div className="flex items-end">
                        <Button
                          type="button"
                          variant="ghost"
                          size="sm"
                          onClick={() => removeLineItem(item.id)}
                          disabled={lineItems.length <= 1}
                          className="h-10"
                        >
                          <Trash2 className="h-4 w-4" />
                        </Button>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </div>

          <Separator />

          {/* Total */}
          <div className="flex justify-end">
            <Card className="w-64">
              <CardContent className="p-4">
                <div className="flex justify-between items-center">
                  <Label className="text-lg font-semibold">Total Amount:</Label>
                  <span className="text-2xl font-bold text-primary">
                    Ksh {calculateTotal().toFixed(2)}
                  </span>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>

        <DialogFooter className="gap-2">
          <Button variant="outline" onClick={handleCancel} disabled={isSubmitting}>
            Cancel
          </Button>
          <Button onClick={handleSaveInvoice} disabled={isSubmitting}>
            {isSubmitting && <Loader2 className="h-4 w-4 mr-2 animate-spin" />}
            Save Invoice
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}